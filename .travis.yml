sudo: required
dist: trusty
language: cpp

cache:
  directories:
    - cache

matrix:
  include:
    - compiler: clang
      env:
        - COMPILER_CC=clang
        - COMPILER_CXX=clang++
        - BUILD_NAME=clang
    - compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-5
      env:
        - COMPILER_CC=gcc-5
        - COMPILER_CXX=g++-5
        - BUILD_NAME=gcc5

before_install:
  - export ROOT_DIR=`pwd`
  - export CACHE_DIR=`pwd`/cache
  - export COVERALLS_ENABLE=OFF
  - export COVERALLS_SERVICE_NAME=travis-ci
  - cd ${CACHE_DIR}
  - if [ ! -f ninja-linux.zip ]; then wget https://github.com/ninja-build/ninja/releases/download/v1.7.1/ninja-linux.zip; fi
  - if [ ! -f cmake-3.6.1-Linux-x86_64.tar.gz ]; then wget -q https://cmake.org/files/v3.6/cmake-3.6.1-Linux-x86_64.tar.gz; fi
  - if [ ! -f clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz ]; then wget -q http://llvm.org/releases/3.8.0/clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz; fi
  - if [ ! -f external-0.1.1-clang.tar.bz2 ]; then wget -q https://github.com/comphack/external/releases/download/external-18/external-0.1.1-clang.tar.bz2; fi
  - if [ ! -f external-0.1.1-gcc5.tar.bz2 ]; then wget -q https://github.com/comphack/external/releases/download/external-18/external-0.1.1-gcc5.tar.bz2; fi
  - ls -lh
  - cd ${ROOT_DIR}
  - sudo apt-get update -q
  - sudo apt-get install libssl-dev unzip -y
  - sudo mkdir -p /opt/ninja/bin
  - cd /opt/ninja/bin
  - sudo unzip $CACHE_DIR/ninja-linux.zip
  - sudo chmod 755 ninja
  - export PATH="/opt/ninja/bin:${PATH}"
  - cd /opt
  - sudo tar xf $CACHE_DIR/cmake-3.6.1-Linux-x86_64.tar.gz
  - export PATH="/opt/cmake-3.6.1-Linux-x86_64/bin:${PATH}"
  - export LD_LIBRARY_PATH="/opt/cmake-3.6.1-Linux-x86_64/lib"
  - cd ${ROOT_DIR}
  - if [ "$CXX" == "clang++" ]; then sudo tar xf $CACHE_DIR/external-0.1.1-clang.tar.bz2; fi
  - if [ "$CXX" != "clang++" ]; then sudo tar xf $CACHE_DIR/external-0.1.1-gcc5.tar.bz2; fi
  - mv external-* binaries
  - chmod +x binaries/ttvfs/bin/ttvfs_gen
  - if [ "$CXX" == "clang++" ]; then cd /opt; fi
  - if [ "$CXX" == "clang++" ]; then sudo tar xf $CACHE_DIR/clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz; fi
  - if [ "$CXX" == "clang++" ]; then export PATH="/opt/clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-14.04/bin:${PATH}"; fi
  - if [ "$CXX" == "clang++" ]; then export LD_LIBRARY_PATH="/opt/clang+llvm-3.8.0-x86_64-linux-gnu-ubuntu-14.04/lib:${LD_LIBRARY_PATH}"; fi
  - if [ "$CXX" == "clang++" ]; then cd ${ROOT_DIR}; fi
  - export CC="${COMPILER_CC}"
  - export CXX="${COMPILER_CXX}"
  - export CTEST_OUTPUT_ON_FAILURE=1

script:
  - if [ "${COVERITY_SCAN_BRANCH}" != 1 ]; then mkdir -p build && cd build && cmake -DBUILD_OPTIMIZED=OFF .. && cmake --build . ; fi
#  - if [ "${COVERITY_SCAN_BRANCH}" != 1 ]; then cmake --build . --target test ; fi
  - if [ "${COVERITY_SCAN_BRANCH}" != 1 ]; then cmake --build . --target package ; fi
  - mv libobjects-*.tar.bz2 libobjects-${BUILD_NAME}.tar.bz2

deploy:
  provider: releases
  api_key:
    secure: pS+iL9Ch0bA/oEO8Msxjjja2/PSe6MUxtPxtGeT/L/g6L0qWRvJOzU71H6G/nK6Eeri8g6OSfK842dCaI2c9iNvcMx6zEApcRAkoVOApm1eh87hlb0q4eo0BgtFqFpK+ru28GCYJh4L2fnR0JWiaKCsDpXQmQ6rby7O5B9/iGqMnAyKnFqoB3mb+sSUAXqL9sPXPrJtOwNBP1gbxvY3CDTMcYbG6DbgRUmp7x5bmd6Y0mIvEgW85iaRySjnThmlKEPX2lhomkIEnKvPttAl4l9tWlQsftCyVegzjyZo1PqsCwq6cB2lGwDw8exwuybMj1GOc5NT5pUvOraoiFwNXt3vHdK4wV1saG8HFTE4ZjIQogi7qU1mzO6iA6I98KvpuQnBYXTYodV06ibpVKwO2jGUpgq0zwJJJI77yofkPJBWX+qVm4YTlmCpXOfoaSvxPOVYkXeUD7ZlPvn7Wo1jGT1v8ZcdVmVqFHIpxqrxWSUQb569YmrW+A1LpvadNOHhpYITZD4WHcBWkLSFoTj2orsnuIUvbyWv08u1i39atID/C3F/7BTSvv8lACGB+uQdUs4lMW/AO8b+y1rp3jE19ial/3uS8zEkF3YPYL5aQnhyuCoFrKenhXjGoOi4A+2PXWEKtMZ0vepQKnepux5/qFB0kBn9d5RS8CoYaxbATP+g=
  skip_cleanup: true
  file_glob: true
  file: libobjects-*.tar.bz2
  on:
    repo: comphack/libobjects
    branch: develop
    tags: true
